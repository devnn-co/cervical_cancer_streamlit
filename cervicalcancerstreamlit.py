# -*- coding: utf-8 -*-
"""CervicalCancerStreamlit.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1K9eT41GK495u3nkGK7zqNU0G-27ZyRnQ
"""

import numpy as np
import pandas as pd
import cv2
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split

from google.colab import drive
drive.mount('/content/drive')

cancer_df = pd.read_csv('/content/drive/My Drive/kag_risk_factors_cervical_cancer.csv')

cancer_df = cancer_df.replace('?', None)

for i in cancer_df.columns:
 cancer_df['Num_' + i] = pd.to_numeric(cancer_df[i])

mid_index = len(cancer_df.columns) // 2

second_half_cols = cancer_df.columns[mid_index:]

cancer_df[second_half_cols] = cancer_df[second_half_cols].fillna(cancer_df[second_half_cols].median())

mid_index_cols = len(cancer_df.columns) // 2

cancer_df = cancer_df.iloc[:, mid_index_cols:]

for i in cancer_df['Num_Dx']:
  if i < 1 and i > 0:
    cancer_df['Num_Dx'] = cancer_df['Dx'].replace(i, 0)

cancer_df.columns

X = cancer_df[['Num_Dx:CIN', 'Num_Smokes', 'Num_Dx:Cancer', 'Num_Hormonal Contraceptives (years)']]
y = cancer_df['Num_Dx']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print(X_train.shape, X_test.shape, y_train.shape, y_test.shape)

sum = 0
for i in cancer_df["Num_Dx"]:
  if i == 1:
    sum += 1

print(sum)

from sklearn.metrics import f1_score
from sklearn.metrics import precision_score
from sklearn.metrics import recall_score
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
from sklearn.metrics import accuracy_score

from sklearn.tree import DecisionTreeClassifier

decision_tree = DecisionTreeClassifier()

decision_tree.fit(X_train, y_train)
y_pred = decision_tree.predict(X_test)

print(accuracy_score(y_test, y_pred))
print(f1_score(y_test, y_pred))
print(precision_score(y_test, y_pred))
print(recall_score(y_test, y_pred))

cm = confusion_matrix(y_test, y_pred)

from sklearn.tree import plot_tree

plt.figure(figsize=(12, 8))
plot_tree(decision_tree, feature_names=X.columns, class_names=["No Dx", "Yes Dx"], filled=True)
plt.show()

from joblib import dump, load
!pip -q install streamlit
!pip -q install pyngrok
from pyngrok import ngrok

!ngrok authtoken 2uC4Pajp3rAuCx784CXyY58ZXEP_6C8bK7UkabVyFH37gEK77

dump(decision_tree, "model.joblib")

# Commented out IPython magic to ensure Python compatibility.
# %%writefile header.py
# import streamlit as st
# 
# def create_header():
#   st.title("Using AI to Predict the Risk of Cervical Cancer")
#   st.header("Bridget P")
#   st.subheader("Making a prediction of a diagnosis of cervical cancer using a decision tree model.")

# Commented out IPython magic to ensure Python compatibility.
# %%writefile userinput.py
# import streamlit as st
# 
# def get_user_input():
#   CIN_diagnosis = st.number_input("Have you been diagnosed with cervical intraepithelial neoplasia (CIN)? Y: (1), N: (0)")
#   cancer_diagnosis = st.number_input("Have you been diagnosed with any form of cancer in the past? Y: (1), N: (0) ")
#   smokes = st.number_input("Do you or have you smoke(d) regularly? Y: (1), N: (0) ")
#   year_hormonal_contraceptives = st.number_input("How many years have you been using hormonal contraceptives? If you've never used any, input: 0.")
# 
#   input_features = [[CIN_diagnosis, cancer_diagnosis, smokes, year_hormonal_contraceptives]]
#   return input_features

# Commented out IPython magic to ensure Python compatibility.
# %%writefile predictor.py
# 
# def make_prediction(decision_tree, input):
#   return decision_tree.predict(input)

# Commented out IPython magic to ensure Python compatibility.
# %%writefile response.py
# import streamlit as st
# 
# def get_app_response(prediction):
#   if prediction == 1:
#     st.write("The model predicts are likely to be at risk for cervical cancer. Consider seeing a doctor for a cervical screening.")
#   elif prediction == 0:
#     st.write("The model predicts that your are not as likely to be at risk for cervical cancer.")
#   else:
#     st.write ("No results yet")

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# from joblib import load
# 
# # Imports the functions we coded above
# from header import *
# from userinput import *
# from response import *
# from predictor import *
# 
# # Load our DecisionTree model into our web app
# model = load("model.joblib")
# st.write ("Model uploaded!") # You may remove this in your finalized web app!
# 
# create_header()
# input_features = get_user_input()
# prediction = make_prediction(model, input_features)
# get_app_response(prediction)
#


def launch_website():
  print ("Click this link to try your web app:")
  public_url = ngrok.connect()
  print (public_url)
  !streamlit run --server.port 80 app.py >/dev/null
    
launch_website()
